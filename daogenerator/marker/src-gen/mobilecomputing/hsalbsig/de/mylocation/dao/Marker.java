package mobilecomputing.hsalbsig.de.mylocation.dao;

import mobilecomputing.hsalbsig.de.mylocation.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MARKER".
 */
public class Marker {

    private Long id;
    private Double Latitude;
    private Double Longitude;
    private String Text;
    private Long MarkerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MarkerDao myDao;

    private Track track;
    private Long track__resolvedKey;


    public Marker() {
    }

    public Marker(Long id) {
        this.id = id;
    }

    public Marker(Long id, Double Latitude, Double Longitude, String Text, Long MarkerId) {
        this.id = id;
        this.Latitude = Latitude;
        this.Longitude = Longitude;
        this.Text = Text;
        this.MarkerId = MarkerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMarkerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getLatitude() {
        return Latitude;
    }

    public void setLatitude(Double Latitude) {
        this.Latitude = Latitude;
    }

    public Double getLongitude() {
        return Longitude;
    }

    public void setLongitude(Double Longitude) {
        this.Longitude = Longitude;
    }

    public String getText() {
        return Text;
    }

    public void setText(String Text) {
        this.Text = Text;
    }

    public Long getMarkerId() {
        return MarkerId;
    }

    public void setMarkerId(Long MarkerId) {
        this.MarkerId = MarkerId;
    }

    /** To-one relationship, resolved on first access. */
    public Track getTrack() {
        Long __key = this.MarkerId;
        if (track__resolvedKey == null || !track__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrackDao targetDao = daoSession.getTrackDao();
            Track trackNew = targetDao.load(__key);
            synchronized (this) {
                track = trackNew;
            	track__resolvedKey = __key;
            }
        }
        return track;
    }

    public void setTrack(Track track) {
        synchronized (this) {
            this.track = track;
            MarkerId = track == null ? null : track.getId();
            track__resolvedKey = MarkerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
